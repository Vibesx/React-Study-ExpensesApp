[{"/home/leon/react-study/react-complete-guide/src/index.js":"1","/home/leon/react-study/react-complete-guide/src/App.js":"2","/home/leon/react-study/react-complete-guide/src/components/Expenses/Expenses.js":"3","/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpenseItem.js":"4","/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpenseDate.js":"5","/home/leon/react-study/react-complete-guide/src/components/UI/Card.js":"6","/home/leon/react-study/react-complete-guide/src/components/NewExpense/NewExpense.js":"7","/home/leon/react-study/react-complete-guide/src/components/NewExpense/ExpenseForm.js":"8","/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpensesFilter.js":"9","/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpensesList.js":"10"},{"size":179,"mtime":1648532578000,"results":"11","hashOfConfig":"12"},{"size":1395,"mtime":1661854783473,"results":"13","hashOfConfig":"12"},{"size":2134,"mtime":1664890330143,"results":"14","hashOfConfig":"12"},{"size":1365,"mtime":1664890676993,"results":"15","hashOfConfig":"12"},{"size":695,"mtime":1661009226186,"results":"16","hashOfConfig":"12"},{"size":327,"mtime":1661163133325,"results":"17","hashOfConfig":"12"},{"size":555,"mtime":1661513223773,"results":"18","hashOfConfig":"12"},{"size":4254,"mtime":1661512974453,"results":"19","hashOfConfig":"12"},{"size":671,"mtime":1661766125451,"results":"20","hashOfConfig":"12"},{"size":581,"mtime":1664890570133,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"12xwerm",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/leon/react-study/react-complete-guide/src/index.js",[],["44","45"],"/home/leon/react-study/react-complete-guide/src/App.js",[],"/home/leon/react-study/react-complete-guide/src/components/Expenses/Expenses.js",["46"],"/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpenseItem.js",["47"],"/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpenseDate.js",[],"/home/leon/react-study/react-complete-guide/src/components/UI/Card.js",[],"/home/leon/react-study/react-complete-guide/src/components/NewExpense/NewExpense.js",[],"/home/leon/react-study/react-complete-guide/src/components/NewExpense/ExpenseForm.js",["48","49","50","51"],"import { useState } from \"react\";\n\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = (props) => {\n\tconst [enteredTitle, setEnteredTitle] = useState(\"\");\n\tconst [enteredAmount, setEnteredAmount] = useState(\"\");\n\tconst [enteredDate, setEnteredDate] = useState(\"\");\n\n\t// event is a parameter passed by default to any event (onClick, onChange, etc)\n\tconst titleChangeHandler = (event) => {\n\t\tsetEnteredTitle(event.target.value);\n\t};\n\n\tconst amountChangeHandler = (event) => {\n\t\tsetEnteredAmount(event.target.value);\n\t};\n\n\tconst dateChangeHandler = (event) => {\n\t\tsetEnteredDate(event.target.value);\n\t};\n\n\tconst submitHandler = (event) => {\n\t\t// by default, the submit event triggers a request send and page refresh, which we do not want as react uses a single page approach\n\t\t// to prevent this behaviour, we can call event.preventDefault()\n\t\tevent.preventDefault();\n\n\t\tconst expenseData = {\n\t\t\ttitle: enteredTitle,\n\t\t\tamount: enteredAmount,\n\t\t\tdate: new Date(enteredDate),\n\t\t};\n\n\t\tprops.onSaveExpenseData(expenseData);\n\t\t//console.log(expenseData);\n\t\tsetEnteredTitle(\"\");\n\t\tsetEnteredAmount(\"\");\n\t\tsetEnteredDate(\"\");\n\t};\n\n\treturn (\n\t\t// forms have a default onSubmit event that is triggered on pressing the button of type submit\n\t\t<form onSubmit={submitHandler}>\n\t\t\t<div className=\"new-expense__controls\">\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t{/* two-way binding: we set the value of the input to our state variable; that way when it changes, the value inside the input changes as well */}\n\t\t\t\t\t{/* this will help for example when we will want to clear the fields */}\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={enteredTitle}\n\t\t\t\t\t\tonChange={titleChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"new-expense__controls\">\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Amount</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tmin=\"0.01\"\n\t\t\t\t\t\tstep=\"0.01\"\n\t\t\t\t\t\tvalue={enteredAmount}\n\t\t\t\t\t\tonChange={amountChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"new-expense__controls\">\n\t\t\t\t<div className=\"new-expense__control\">\n\t\t\t\t\t<label>Date</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tmin=\"2019-01-01\"\n\t\t\t\t\t\tmax=\"2022-12-31\"\n\t\t\t\t\t\tvalue={enteredDate}\n\t\t\t\t\t\tonChange={dateChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"new-expense__actions\">\n\t\t\t\t<button type=\"submit\">Add Expense</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\n// alternative approach to multiple individual states\n// just a test function to display alternative method; ignore otherwise\nconst AlternativeExpenseForm = () => {\n\t// we can also have a different approach to the above code, using an object instead of a string that encompasses all 3 values:\n\tconst [userInput, setUserInput] = useState({\n\t\tenteredTitle: \"\",\n\t\tenteredAmount: \"\",\n\t\tenteredDate: \"\",\n\t});\n\t// then we use setUserInput({ ...userInput, enteredTitle: event.target.value})\n\t// ...userInput basically sets the properties to the old properties of userInput, and then we can override individual fields\n\t// with this aproach we need to be careful always to set the old fields, as if we would just set the changed field, the others would be lost\n\t// that's why we need to set ...userInput first\n\tconst titleChangeHandler = (event) => {\n\t\t// this method of using previous state (...userInput) is will work most of the time, but in some cases it might fail (when we set a lot of states in paralel)\n\t\t// because the previous state we get might not be the most recent one\n\t\t// therefore, a better option is illustrated below\n\t\t//setUserInput({ ...userInput, enteredTitle: event.target.value });\n\t\tsetUserInput((prevState) => {\n\t\t\t// here we are sure to get the latest previous state; prevState (can be named whatever) is passed by default by react as a parameter and stores the latest state\n\t\t\t// this approach should always be used when we need to work with previous state snapshots as react is making sure it is the right one\n\t\t\treturn { ...prevState, enteredTitle: event.target.value };\n\t\t});\n\t};\n\n\tconst amountChangeHandler = (event) => {\n\t\tsetUserInput({ ...userInput, enteredAmount: event.target.value });\n\t};\n\n\tconst dateChangeHandler = (event) => {\n\t\tsetUserInput({ ...userInput, enteredDate: event.target.value });\n\t};\n};\n\nexport default ExpenseForm;\n","/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpensesFilter.js",[],"/home/leon/react-study/react-complete-guide/src/components/Expenses/ExpensesList.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":19},{"ruleId":"56","severity":1,"message":"60","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":18},{"ruleId":"56","severity":1,"message":"61","line":89,"column":7,"nodeType":"58","messageId":"59","endLine":89,"endColumn":29},{"ruleId":"56","severity":1,"message":"62","line":100,"column":8,"nodeType":"58","messageId":"59","endLine":100,"endColumn":26},{"ruleId":"56","severity":1,"message":"63","line":112,"column":8,"nodeType":"58","messageId":"59","endLine":112,"endColumn":27},{"ruleId":"56","severity":1,"message":"64","line":116,"column":8,"nodeType":"58","messageId":"59","endLine":116,"endColumn":25},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'ExpenseItem' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'AlternativeExpenseForm' is assigned a value but never used.","'titleChangeHandler' is assigned a value but never used.","'amountChangeHandler' is assigned a value but never used.","'dateChangeHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]